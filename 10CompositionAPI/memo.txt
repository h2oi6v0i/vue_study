📌 setup()
- 상수를 setup() 메서드 안에 설정하면 DOM이나 템플릿에서 바로 사용할 수 없고 추가 작업이 필요하다.
- 추가 작업이란 이 구성 객체가 속하는 컴포넌트의 템플릿에서 활용할 요소를 return 하는 것이다.
- 즉, setup()에는 템플릿에서 활용할 요소를 객체에 넣고 그 객체를 반환한다.


📌 ref
- ref 함수는 객체를 생성하고, ref 함수에 전달하는 값은 value 프로퍼티에 저장된다.
- ref 말고도 객체에는 .value 프로퍼티가 포함된다.
- ref를 템플릿에 전달하면 Vue가 자동으로 .value 프로퍼티를 확인하기 때문에 템플릿에서는 쓸 필요 없다.
- ref는 string, number, object 등 다양한 타입에 사용한다.
- .value로 속성 접근


📌 reactive
- 객체만을 이용한다.
- name, age를 value 프로퍼티를 갖는 객체로 래핑하고 기존 값에 포인터를 가리키는 대신 reactive에 전달한 객체를 Proxy로 래핑해서 반응형으로 만든 후 객체를 사용할 수 있게 해준다.
- .value로 속성 접근할 필요 X (value 프로퍼티로 객체를 래핑하지 않기 때문에)


📌 isRef, isReactive
- isRef(isReactive)는 해당 객체가 ref(reactive)인지 아닌지를 판별해 주는 함수


📌 toRefs
- toRefs에 객체를 입력하면 자동으로 객체의 프로퍼티 값을 모두 ref로 바꿔준다.
- reactive 객체에만 활용할 수 있다.


❓
- isRef() 함수는 Vue의 ref 객체인지 여부를 확인하는 함수입니다. user.name은 반응성을 갖는 일반 객체의 속성이므로 isRef(user.name)은 false를 반환할 것입니다.
- reactive() 함수로 생성된 객체의 속성은 ref 객체가 아닌 일반 반응성을 갖는 객체입니다.
- 따라서 isRef() 함수로 확인할 때 false가 반환되는 것은 정상입니다. reactive() 함수는 객체 전체를 반응성으로 감싸는 것이며, 속성들은 일반적인 객체 속성처럼 접근하고 수정할 수 있습니다.